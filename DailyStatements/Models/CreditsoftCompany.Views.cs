//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(AMPStatements.Models.CreditsoftCompaniesEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets94481d1aeeed22924cae3e3b5cf7788add83c7ed66417b827ac9460e4f66427b))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets94481d1aeeed22924cae3e3b5cf7788add83c7ed66417b827ac9460e4f66427b : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "94481d1aeeed22924cae3e3b5cf7788add83c7ed66417b827ac9460e4f66427b"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CompanyListStoreContainer.Companies")
            {
                return GetView0();
            }

            if (extentName == "CreditsoftCompaniesEntities.Companies")
            {
                return GetView1();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CompanyListStoreContainer.Companies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Companies
        [CompanyList.Store.Companies](T1.Companies_CompanyID, T1.Companies_Name, T1.Companies_ShortName, T1.Companies_CreditsoftDatabase, T1.Companies_SecurityGroup, T1.Companies_MenuOption, T1.Companies_Active)
    FROM (
        SELECT 
            T.CompanyID AS Companies_CompanyID, 
            T.Name AS Companies_Name, 
            T.ShortName AS Companies_ShortName, 
            T.CreditsoftDatabase AS Companies_CreditsoftDatabase, 
            T.SecurityGroup AS Companies_SecurityGroup, 
            T.MenuOption AS Companies_MenuOption, 
            T.Active AS Companies_Active, 
            True AS _from0
        FROM CreditsoftCompaniesEntities.Companies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CreditsoftCompaniesEntities.Companies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Companies
        [CompanyList.Company](T1.Company_CompanyID, T1.Company_Name, T1.Company_ShortName, T1.Company_CreditsoftDatabase, T1.Company_SecurityGroup, T1.Company_MenuOption, T1.Company_Active)
    FROM (
        SELECT 
            T.CompanyID AS Company_CompanyID, 
            T.Name AS Company_Name, 
            T.ShortName AS Company_ShortName, 
            T.CreditsoftDatabase AS Company_CreditsoftDatabase, 
            T.SecurityGroup AS Company_SecurityGroup, 
            T.MenuOption AS Company_MenuOption, 
            T.Active AS Company_Active, 
            True AS _from0
        FROM CompanyListStoreContainer.Companies AS T
    ) AS T1");
        }
    }
}
